#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2020 Joyent, Inc.
#

#version=RHEL8
# Install OS instead of upgrade
install

# Install from an installation tree on a remote server
# Required when using a minimal ISO
url --url=http://mirror.centos.org/centos/$releasever/BaseOS/$basearch/os

text
poweroff

# System keyboard
keyboard us

# System language
lang en_US.UTF-8

# Setup network interfaces via DHCP
#network --device=eth0 --bootproto=dhcp --onboot=yes --activate
network --bootproto=dhcp --onboot=yes --activate

# Set repo to mirror.centos.org. With CentOS 8, updates are added to BaseOS
# and/or AppStream.  See https://wiki.centos.org/FAQ/CentOS8.
repo --name="CentOS" --baseurl=http://mirror.centos.org/centos/$releasever/BaseOS/$basearch/os/ --cost=100
repo --name="AppStream" --baseurl=http://mirror.centos.org/centos/$releasever/AppStream/$basearch/os/ --cost=100

#set root pw here (required by KS), remove pw in post
rootpw temp
firewall --enabled --service=ssh
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.0_release_notes/rhel-8_0_0_release#BZ-1640697
# XXX is this still needed to get sha512?
#authconfig --enableshadow --passalgo=sha512
firstboot --disabled

# SELinux configuration
# By default, selinux is enforcing
#selinux --enforcing
selinux --permissive

# Installation logging level
logging --level=debug

# System timezone
timezone  Etc/UTC

# System bootloader configuration
bootloader --location=mbr --driveorder=vda --append="tsc=reliable divider=10 plymouth.enable=0 console=ttyS0"

# Clear the Master Boot Record
zerombr

# Automatically create partitions, no LVM
autopart --nolvm

# Partition clearing information
clearpart --all --initlabel

%packages
@core --nodefaults
acpid
cloud-init
cloud-utils-growpart
iputils
man
net-tools
parted
python3-pyserial
vim-enhanced
wget
# Exclude packages that are not needed in a VM image
-iwl*-firmware
-alsa-*
-btrfs-progs*
-centos-logos
-dracut-config-rescue
-microcode_ctl
-plymouth*

%end

%pre
#! /bin/bash

joyent_status=fail
trap 'echo JOYENT_STATUS_PRE=$joyent_status' EXIT

set -ex

cd /tmp
# -F (not -f) so that it starts logging when file appears.
tail -F anaconda.log program.log rpm-script.log storage.log packaging.log \
    >>/dev/ttyS0 2>&1 </dev/null &
set +x
joyent_status=ok
%end

%post --log=/run/ks.post.log
#!/bin/bash

joyent_status=fail
trap 'echo JOYENT_STATUS_POST=$joyent_status' EXIT

set -ex

mkdir -p /run/install/joyks
mount /dev/disk/by-label/kickstart /run/install/joyks

# Install sdc-vmtools guest tools
echo "Installing SmartOS VM Guest Tools..."

sdcvmtools="/run/install/joyks/sdc-vmtools/src/linux"

cp -r ${sdcvmtools}/lib/smartdc /lib/
cp -r ${sdcvmtools}/usr/sbin/mdata-* /usr/sbin/
cp -r ${sdcvmtools}/usr/share/man/man1/mdata-* /usr/share/man/man1/
ln -s /usr/sbin/mdata-get /lib/smartdc/mdata-get
echo "SmartOS VM Guest Tools installed"

# Remove root password
echo "Removing root password"
passwd -d root

## Build date used for motd and product file
release=$(awk '$0 ~ /CentOS Linux release / { print $4 }' /etc/redhat-release |
    cut -d. -f 1-2)
if [[ -z "$release" ]]; then
	echo "ks.cfg: failed to determine release" 1>&2
	exit 1
fi
BUILDDATE=$(date +%Y%m%d)
NAME="CentOS $release"
DOCS="https://docs.joyent.com/images/linux/centos"

# Create MOTD
echo "Creating /etc/motd"
mv /etc/motd /etc/motd-backup
cat << MOTD > /etc/motd
   __        .                   .
 _|  |_      | .-. .  . .-. :--. |-
|_    _|     ;|   ||  |(.-' |  | |
  |__|   \`--'  \`-' \`;-| \`-' '  ' \`-'
                   /  ;  Instance ($NAME $BUILDDATE)
                   \`-'   $DOCS

MOTD

# MOTD symlinks
echo "Creating /etc/motd symlinks"
ln -sf /etc/motd /etc/issue
ln -sf /etc/motd /etc/issue.net

# Create product file
echo "Creating /etc/product file"
cat << PRODUCT > /etc/product
Name: Joyent Instance
Image: $NAME $BUILDDATE
Documentation: $DOCS
Description: $NAME 64-bit image with just essential packages installed. Ideal for users who are comfortable with setting up their own environment and tools.
PRODUCT

# Grub
echo "Installing new GRUB file"
cat <<EOF > /etc/default/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="CentOS Linux"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL="serial console"
GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"
GRUB_CMDLINE_LINUX="tsc=reliable divider=10 plymouth.enable=0 console=ttyS0 crashkernel=auto"
GRUB_DISABLE_RECOVERY="true"
EOF
/usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg

# Make sure we have the latest security updates
echo "Updating packages"
/usr/bin/yum clean all
/usr/bin/yum update -y

# Install Node.js and json via EPEL
/usr/bin/yum install -y epel-release
/usr/bin/yum install -y nodejs
/usr/bin/npm install -g json

packages="/run/install/joyks/Packages"
for file in $packages/*.rpm; do
    [[ -f $file ]] && yum install -y "$file"
done

echo "Configuring cloud-init"
cat <<EOF > /etc/cloud/cloud.cfg.d/90_smartos.cfg
datasource_list: [ SmartOS ]

# Preserve traditional root@<ip> login that was possible with rc.local
disable_root: false

# Do not create the centos/ubuntu/debian user
users: [ ]

mounts:
- [ vdb, /data, auto, "defaults,nofail" ]
EOF

# Clean up all yum caches
echo "Cleaning up yum caches"
/usr/bin/yum clean all

# Clean up network devices
echo "Cleaning up network devices"
/bin/rm -f /etc/udev/rules.d/70-persistent-net.rules
/bin/rm -rf /etc/sysconfig/network-scripts/ifcfg-*
/bin/find /var/lib/dhclient -type f -exec rm -f '{}' +
/bin/rm -f /etc/resolv.conf

# Remove hostname
echo "Clearing out /etc/hostname"
cat /dev/null > /etc/hostname

# Tune Linux vm.dirty_background_bytes (IMAGE-439)
# The following tuning causes dirty data to begin to be background flushed at
# 100 Mbytes, so that it writes earlier and more often to avoid a large build
# up and improving overall throughput.
echo "Setting vm.dirty_background_bytes"
echo "vm.dirty_background_bytes=100000000" >> /etc/sysctl.conf

# Disable password auth. SSH login is via ssh key only. A password is being set
# for root via the image manifest per IMAGE-459.
echo "Disabling password auth in sshd_config"
sed s/PasswordAuthentication\ yes/PasswordAuthentication\ no/ -i /etc/ssh/sshd_config

# Disable kdump
echo "Disabling kdump"
systemctl disable kdump.service

# Clean up files
echo "Cleaning up build files"
/bin/find /var/log -type f | xargs rm -f
/bin/touch /var/log/wtmp
/bin/rm -f /root/.bash_history || true
/bin/rm -f /root/.viminfo || true
/bin/find /etc/ssh -type f -name "ssh_host_*" | xargs rm -f
/bin/rm -f /root/.ssh/authorized_keys || true
/bin/rm -rf /root/anaconda-ks.cfg || true
/bin/rm -rf /tmp/.npm/
/bin/rm -rf /tmp/ks-script*
/bin/rm -rf /var/log/anaconda

set +x
joyent_status=ok
%end
